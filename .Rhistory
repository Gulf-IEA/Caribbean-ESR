# plot and save ----------------------------------
plotIndicatorTimeSeries(ind, plotrownum = 2, coltoplot = 1:2, sublabel = TRUE, dateformat = "%Y%b", trendAnalysis = T)
library(plotTimeSeries)
# plot and save ----------------------------------
plotIndicatorTimeSeries(ind, plotrownum = 2, coltoplot = 1:2, sublabel = TRUE, dateformat = "%Y%b", trendAnalysis = T)
save(ind, file = "indicator_objects/tier3.RData")
rm(list = ls())
directory <- rprojroot::find_rstudio_root_file()
setwd(directory)
library(plotTimeSeries)
library(spam)
png(file="indicator_plots/DegreeHeatingWeeks.png", width=600, height=350)
load("indicator_objects/DegreeHeatingWeeks.RData")
plotIndicatorTimeSeries(ind, coltoplot = 1:2, trendAnalysis = T, sublabel = T, dateformat = "%Y%m", plotrownum = 2, plotcolnum = 1)
dev.off()
png(file="indicator_plots/DegreeHeatingWeeks.png")
load("indicator_objects/DegreeHeatingWeeks.RData")
plotIndicatorTimeSeries(ind, coltoplot = 1:2, trendAnalysis = T, sublabel = T, dateformat = "%Y%m", plotrownum = 2, plotcolnum = 1)
dev.off()
png(file="indicator_plots/DegreeHeatingWeeks.png", res=100)
load("indicator_objects/DegreeHeatingWeeks.RData")
plotIndicatorTimeSeries(ind, coltoplot = 1:2, trendAnalysis = T, sublabel = T, dateformat = "%Y%m", plotrownum = 2, plotcolnum = 1)
dev.off()
png(file="indicator_plots/DegreeHeatingWeeks.png", res=200)
load("indicator_objects/DegreeHeatingWeeks.RData")
plotIndicatorTimeSeries(ind, coltoplot = 1:2, trendAnalysis = T, sublabel = T, dateformat = "%Y%m", plotrownum = 2, plotcolnum = 1)
dev.off()
png(file="indicator_plots/DegreeHeatingWeeks.png", res=50)
load("indicator_objects/DegreeHeatingWeeks.RData")
plotIndicatorTimeSeries(ind, coltoplot = 1:2, trendAnalysis = T, sublabel = T, dateformat = "%Y%m", plotrownum = 2, plotcolnum = 1)
dev.off()
png(file="indicator_plots/DegreeHeatingWeeks.png", width=6, height=4, units="in")
png(file="indicator_plots/DegreeHeatingWeeks.png", width=6, height=4, units="in", res=100)
load("indicator_objects/DegreeHeatingWeeks.RData")
plotIndicatorTimeSeries(ind, coltoplot = 1:2, trendAnalysis = T, sublabel = T, dateformat = "%Y%m", plotrownum = 2, plotcolnum = 1)
dev.off()
png(file="indicator_plots/DegreeHeatingWeeks.png", width=6, height=4, units="in", res=200)
load("indicator_objects/DegreeHeatingWeeks.RData")
plotIndicatorTimeSeries(ind, coltoplot = 1:2, trendAnalysis = T, sublabel = T, dateformat = "%Y%m", plotrownum = 2, plotcolnum = 1)
dev.off()
png(file="indicator_plots/DegreeHeatingWeeks.png", width=5, height=4, units="in", res=200)
load("indicator_objects/DegreeHeatingWeeks.RData")
plotIndicatorTimeSeries(ind, coltoplot = 1:2, trendAnalysis = T, sublabel = T, dateformat = "%Y%m", plotrownum = 2, plotcolnum = 1)
dev.off()
png(file="indicator_plots/DegreeHeatingWeeks.png", width=5, height=4, units="in", res=150)
load("indicator_objects/DegreeHeatingWeeks.RData")
plotIndicatorTimeSeries(ind, coltoplot = 1:2, trendAnalysis = T, sublabel = T, dateformat = "%Y%m", plotrownum = 2, plotcolnum = 1)
dev.off()
png(file="indicator_plots/DegreeHeatingWeeks.png", width=4, height=4, units="in", res=250)
load("indicator_objects/DegreeHeatingWeeks.RData")
plotIndicatorTimeSeries(ind, coltoplot = 1:2, trendAnalysis = T, sublabel = T, dateformat = "%Y%m", plotrownum = 2, plotcolnum = 1)
dev.off()
url1<-'https://www.bde.pr.gov/BDE/PREDDOCS/I_CRUISE.XLS'
library(readxl)
library(httr)
packageVersion("readxl")
GET(url1, write_disk(tf <- tempfile(fileext = ".xls")))
df <- read_excel(tf, 2L)
str(df)
View(df)
df = df[c(52,63),]
View(df)
total_passengers = df[63,]
View(total_passengers)
GET(url1, write_disk(tf <- tempfile(fileext = ".xls")))
df <- read_excel(tf, 2L)
str(df)
total_passengers = df[63,]
View(total_passengers)
GET(url1, write_disk(tf <- tempfile(fileext = ".xls")))
df <- read_excel(tf, 2L)
str(df)
df2 = df[c(52,63),]
df2 = t(df2)
View(df2)
GET(url1, write_disk(tf <- tempfile(fileext = ".xls")))
df <- read_excel(tf, 2L)
str(df)
df2 = df[c(52,63),]
df2t = as.data.frame(t(df2))
View(df2t)
View(df2t)
df2t = df2t[-c(1,2,12),-1]
View(df2)
df2t = as.data.frame(t(df2))
df2t = df2t[-c(1,2,12)]
View(df2t)
df2t = as.data.frame(t(df2))
df2t = df2t[-c(1,2,12),]
View(df2t)
url1<-'https://www.bde.pr.gov/BDE/PREDDOCS/I_CRUISE.XLS'
library(readxl)
library(httr)
packageVersion("readxl")
GET(url1, write_disk(tf <- tempfile(fileext = ".xls")))
df <- read_excel(tf, 2L)
str(df)
df2 = df[c(52,63),]
df2t = as.data.frame(t(df2))
df2t = df2t[-c(1,2,12),]
View(df2t)
yrs_PR = df2t$V1
cruise_PR = df2t$V2
rm(list = ls())
library(pdftools)
library(xml2)
library(rvest)
URL <- "https://usviber.org/archived-data/"
pg <- read_html(URL)
lis <- html_attr(html_nodes(pg, "a"), "href")
lablis <- lis[9:32]
findat <- c()
miss <- c(1995, 1997, 1999, 2002, 2017)
for (i in 1:length(lablis))  {
pdf <- pdf_text(lablis[i]) %>% readr::read_lines()
pdf.labs <- pdf[c(grep("Period", pdf))]
all_stat_lines <- pdf.labs %>% str_squish() %>% strsplit(split = " ")
df1 <- plyr::ldply(all_stat_lines, header = T)
st <- grep("January", pdf)[2]
pdf.stats <- pdf[c(st:(st+11))]
all_stat_lines <- pdf.stats %>% str_squish() %>% strsplit(split = " ")
df <- plyr::ldply(all_stat_lines, header = T)
names(df) <- df1
df2 <- df[, c(2, 5)]
names(df2) <- c("STT", "STX")
df2$yr <- as.numeric(rep(df1[2], 12))
df2$mon <- df[, 1]
findat <- rbind(findat, df2)
if (df1[3] %in% miss) {
df2 <- df[, c(3, 6)]
names(df2) <- c("STT", "STX")
df2$yr <- as.numeric(rep(df1[3], 12))
df2$mon <- df[, 1]
print(pdf[c(5:9)])
print(df2)
findat <- rbind(findat, df2)
}
print(pdf[c(5:9)])
print(df2)
}
yrs_PR
url1<-'https://www.bde.pr.gov/BDE/PREDDOCS/I_CRUISE.XLS'
library(readxl)
library(httr)
packageVersion("readxl")
GET(url1, write_disk(tf <- tempfile(fileext = ".xls")))
df <- read_excel(tf, 2L)
str(df)
df2 = df[c(52,63),]
df2t = as.data.frame(t(df2))
df2t = df2t[-c(1,2,12),]
yrs_PR = df2t$V1
cruise_PR = df2t$V2
yrs_PR
yrs_PR = as.integer(df2t$V1)
cruise_PR = df2t$V2
yrs_PR
yrs_PR
cruise_PR
install.packages("pdftables")
library(pdftools)
library(pdftables)
df = pdf_text("https://usviber.org/wp-content/uploads/2023/12/Tourism-indicator-2022-12-28-23-1.pdf")
url2 <- 'https://usviber.org/wp-content/uploads/2023/12/Tourism-indicator-2022-12-28-23-1.pdf'
GET(url2, write_disk(tf <- tempfile(fileext = ".pdf")))
df = pdf_text(tf)
library(tabulizer)
install.packages("tabulapdf")
library(tabulapdf)
require(pdftools)
require(tidyverse)
require(ggplot2)
url2 <- 'https://usviber.org/wp-content/uploads/2023/12/Tourism-indicator-2022-12-28-23-1.pdf'
raw_text <- map(url2, pdf_text)
url1<-'https://www.bde.pr.gov/BDE/PREDDOCS/I_CRUISE.XLS'
library(readxl)
library(httr)
packageVersion("readxl")
GET(url1, write_disk(tf <- tempfile(fileext = ".xls")))
df <- read_excel(tf, 2L)
str(df)
df2 = df[c(52,63),]
df2t = as.data.frame(t(df2))
df2t = df2t[-c(1,2,12),]
yrs_PR = as.integer(df2t$V1)
cruise_PR = df2t$V2
yrs_PR
cruise_PR
require(pdftools)
require(tidyverse)
require(ggplot2)
url2 <- 'https://usviber.org/wp-content/uploads/2023/12/Tourism-indicator-2022-12-28-23-1.pdf'
raw_text <- map(url2, pdf_text)
clean_table1 <- function(raw) {
#Split the single pages
raw <- map(raw, ~str_split(.x, "\\n") %>% unlist())
#Concatenate the split pages
raw <- reduce(raw, c)
#Specify the start and end of the table data
table_start <- stringr::str_which(tolower(raw), 'total visitors')
table_end <- stringr:str_which(tolower(raw), 'number of cruise ships')
table_end <- table_end[min(which(table_end > table_start))]
#Build the table and remove special characters
table <- raw[(table_start):(table_end)]
table <- str_replace_all(table, "\\s{2,}","|")
text_con <- textConnection(table)
data_table <- read.csv(text_con, sep = "|")
#Create a list of column names
colnames(data_table) <- c("x","xx","1990","2000","2008","2009","2010","2011","2012","2013","2014","2015","2016","2017","2018","2019","2020","2021","2022")
data_table
}
results <- map_df(raw_text, clean_table1)
require(stringr)
url2 <- 'https://usviber.org/wp-content/uploads/2023/12/Tourism-indicator-2022-12-28-23-1.pdf'
raw_text <- map(url2, pdf_text)
clean_table1 <- function(raw) {
#Split the single pages
raw <- map(raw, ~str_split(.x, "\\n") %>% unlist())
#Concatenate the split pages
raw <- reduce(raw, c)
#Specify the start and end of the table data
table_start <- stringr::str_which(tolower(raw), 'total visitors')
table_end <- stringr:str_which(tolower(raw), 'number of cruise ships')
table_end <- table_end[min(which(table_end > table_start))]
#Build the table and remove special characters
table <- raw[(table_start):(table_end)]
table <- str_replace_all(table, "\\s{2,}","|")
text_con <- textConnection(table)
data_table <- read.csv(text_con, sep = "|")
#Create a list of column names
colnames(data_table) <- c("x","xx","1990","2000","2008","2009","2010","2011","2012","2013","2014","2015","2016","2017","2018","2019","2020","2021","2022")
data_table
}
results <- map_df(raw_text, clean_table1)
raw_text
# Load necessary libraries
library(pdftools)
library(dplyr)
library(tidyr)
# Load the PDF
pdf_file <- "../../../Downloads/Tourism-indicator-2022-12-28-23-1.pdf"
# Extract text from the PDF
pdf_text <- pdf_text(pdf_file)
# Extract the relevant page (assuming the table is on the first page)
page_text <- pdf_text[1]
# Split the text into lines
lines <- strsplit(page_text, "\n")[[1]]
# Identify the lines containing the Visitor Arrivals table
# (assuming the table starts with "VISITOR ARRIVALS" and ends before "VISITOR EXPENDITURES")
start_line <- grep("VISITOR ARRIVALS", lines)
end_line <- grep("VISITOR EXPENDITURES", lines)
table_lines <- lines[(start_line + 1):(end_line - 1)]
# Combine lines into a single text block and split by spaces
table_text <- paste(table_lines, collapse = " ")
table_data <- strsplit(table_text, " +")[[1]]
table_data
# Extract the years and visitor numbers
years <- c(1990:2022)  # Adjust the range based on actual column positions
years
# Extract the years and visitor numbers
years <- c(1990,2000,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022)  # Adjust the range based on actual column positions
table_data
cruise_passengers <- as.numeric(table_data[85:101])  # Adjust the range based on actual column positions
table_data[85:101]
# Create years column
years <- c(1990,2000,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022)
# Extract and clean the total visitors data by removing commas
cruise_passengers <- gsub(",", "", table_data[85:101])
cruise_passengers <- as.numeric(cruise_passengers)
cruise_passengers
# Create years column
years <- c(1990,2000,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022)
# Extract and clean the total visitors data by removing commas
passengers <- gsub(",", "", table_data[85:101])
passengers <- as.numeric(passengers)
# Create a data frame
USVI_cruise <- data.frame(Year = years, Cruise_passengers = passengers)
# Print the data frame
print(USVI_cruise)
# Specify the URL of the PDF
url <- "https://usviber.org/wp-content/uploads/2023/12/Tourism-indicator-2022-12-28-23-1.pdf"
# Specify the destination file path
destfile <- "indicator_data/Cruise-indicator-2022-12-28-23-1.pdf"
# Download the PDF
download.file(url, destfile, mode = "wb")
# Check if the file has been downloaded
file.exists(destfile)
url1<-'https://www.bde.pr.gov/BDE/PREDDOCS/I_CRUISE.XLS'
library(readxl)
library(httr)
packageVersion("readxl")
GET(url1, write_disk(tf <- tempfile(fileext = ".xls")))
df <- read_excel(tf, 2L)
str(df)
df2 = df[c(52,63),]
df2t = as.data.frame(t(df2))
df2t = df2t[-c(1,2,12),]
yrs_PR = as.integer(df2t$V1)
cruise_PR = df2t$V2
yrs_PR
cruise_PR
yrs_PR = as.integer(df2t$V1)
cruise_PR = as.numeric(df2t$V2)
cruise_PR
# Load necessary libraries
library(pdftools)
library(dplyr)
library(tidyr)
# Specify the URL of the PDF
url2 <- "https://usviber.org/wp-content/uploads/2023/12/Tourism-indicator-2022-12-28-23-1.pdf"
# Specify the destination file path
destfile <- "indicator_data/Cruise-indicator-2022-12-28-23-1.pdf"
# Download the PDF
download.file(url2, destfile, mode = "wb")
# Check if the file has been downloaded
file.exists(destfile)
# Load the PDF
pdf_file <- "indicator_data/Cruise-indicator-2022-12-28-23-1.pdf"
# Extract text from the PDF
pdf_text <- pdf_text(pdf_file)
# Extract the relevant page (assuming the table is on the first page)
page_text <- pdf_text[1]
# Split the text into lines
lines <- strsplit(page_text, "\n")[[1]]
# Identify the lines containing the Visitor Arrivals table
# (assuming the table starts with "VISITOR ARRIVALS" and ends before "VISITOR EXPENDITURES")
start_line <- grep("VISITOR ARRIVALS", lines)
end_line <- grep("VISITOR EXPENDITURES", lines)
table_lines <- lines[(start_line + 1):(end_line - 1)]
# Combine lines into a single text block and split by spaces
table_text <- paste(table_lines, collapse = " ")
table_data <- strsplit(table_text, " +")[[1]]
# Create years column
years <- c(1990,2000,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022)
# Extract and clean the total visitors data by removing commas
passengers <- gsub(",", "", table_data[85:101])
passengers <- as.numeric(passengers)
# Create a data frame
USVI_cruise <- data.frame(Year = years, Cruise_passengers = passengers)
# Print the data frame
print(USVI_cruise)
yrs_USVI = as.integer(USVI_cruise$Year)
cruise_USVI = as.numeric(USVI_cruise$Cruise_passengers)
yrs <- min(yrs_PR, yrs_USVI) : max(yrs_PR, yrs_USVI)
yrs
# Combine lines into a single text block and split by spaces
table_text <- paste(table_lines, collapse = " ")
table_data <- strsplit(table_text, " +")[[1]]
# Create years column
years <- c(2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022)
# Extract and clean the total visitors data by removing commas
passengers <- gsub(",", "", table_data[87:101])
passengers <- as.numeric(passengers)
# Create a data frame
USVI_cruise <- data.frame(Year = years, Cruise_passengers = passengers)
# Print the data frame
print(USVI_cruise)
yrs_USVI = as.integer(USVI_cruise$Year)
cruise_USVI = as.numeric(USVI_cruise$Cruise_passengers)
yrs <- min(yrs_PR, yrs_USVI) : max(yrs_PR, yrs_USVI)
yrs
yrs <- min(yrs_PR, yrs_USVI) : max(yrs_PR, yrs_USVI)
mat <- data.frame(matrix(data = NA, nrow = length(yrs), ncol = 2))
rownames(mat) <- yrs
mat[which(yrs %in% cruise_PR), 1] <- prtab[, 2]
yrs_PR
# Create a data frame
PR_cruise <- data.frame(Year = yrs_PR, Cruise_passengers = cruise_PR)
all_years <- min(PR_cruise$Year, USVI_cruise$Year) : max(PR_cruise$Cruise_passengers, USVI_cruise$Cruise_passengers)
# Merge the data frames with the complete data frame to fill in missing years with NA
combined_df <- merge(all_years, PR_cruise, by = "Year", all.x = TRUE)
combined_df <- merge(combined_df, USVI_cruise, by = "Year", all.x = TRUE)
all_years <- min(PR_cruise$Year, USVI_cruise$Year) : max(PR_cruise$Cruise_passengers, USVI_cruise$Cruise_passengers)
# Merge the data frames with the complete data frame to fill in missing years with NA
combined_df <- merge(all_years, PR_cruise, by = "Year", all.x = TRUE)
PR_cruise
all_years <- data.frame(Year = min(PR_cruise$Year, USVI_cruise$Year) : max(PR_cruise$Cruise_passengers, USVI_cruise$Cruise_passengers))
all_years
all_years <- data.frame(Year = min(PR_cruise$Year, USVI_cruise$Year) : max(PR_cruise$Year, USVI_cruise$Year))
all_years
# Merge the data frames with the complete data frame to fill in missing years with NA
combined_df <- merge(all_years, PR_cruise, by = "Year", all.x = TRUE)
combined_df <- merge(combined_df, USVI_cruise, by = "Year", all.x = TRUE)
combined_df
# save as indicator object ----------------------
datdata <- all_years
inddata <- data.frame(cbind(PR_cruise$Cruise_passengers, USVI_cruise$Cruise_passengers))
combined_df
# save as indicator object ----------------------
datdata <- all_years
inddata <- data.frame(cbind(combined_df$Cruise_passengers.x, combined_df$Cruise_passengers.y))
labs <- c("Cruise passengers" , "thousands of people", "Puerto Rico",
"Cruise passengers" , "thousands of people", "USVI")
indnames <- data.frame(matrix(labs, nrow = 3, byrow = F))
inddata <- list(labels = indnames, indicators = inddata, datelist = datdata)
class(inddata) <- "indicatordata"
ind <- inddata
plotIndicatorTimeSeries(ind, coltoplot = 1:2, plotrownum = 2, sublabel = TRUE)
library(plotTimeSeries)
plotIndicatorTimeSeries(ind, coltoplot = 1:2, plotrownum = 2, sublabel = TRUE)
all_years
# specification file and libraries -----------------------------
rm(list = ls())
dev.off()
library(maps)
library(plotTimeSeries)
library(xml2)
library(rvest)
load("indicator_processing/spec_file.RData")
url <- paste0("https://ds.iris.edu/ieb/evtable.phtml?caller=IEB&st=1970-01-01&et=2025-01-01&minmag=3.5&maxmag=10&mindepth=0&xde=900&orderby=time-desc&src=usgs&limit=5000&",
"maxlat=", max_lat, "&minlat=", min_lat, "&maxlon=", max_lon, "&minlon=", min_lon,
"&sbl=1&zm=8&mt=ter&title=IEB%20export%3A%201033%20earthquakes%20as%20a%20sortable%20table.&stitle=from%",
"201970-01-01%20to%202025-01-01%2C%20with%20magnitudes%20from%203.5%20to%2010%2C%20depths%20from%200%20to",
"%20900%20km%2C%20with%20priority%20for%20most%20recent%2C%20limited%20to%205000%2C%20%20showing%20data%20from%20USGS%2C%20")
page <- read_html(url) #Creates an html document from URL
table <- html_table(page, fill = TRUE) #Parses tables into data frames
table
dat <- data.frame(table[[1]])
head(dat)
dim(dat)
min(dat$Year)
min(dat$Year)
max(dat$Year)
hist(dat$Month)
hist(dat$Depth)
hist(dat$Mag)
dat <- dat[which(dat$Year >= 2000), ]
dat <- dat[which(dat$Year <= terminal_year), ]
# check data download -----------------------------------------
map('world', fill = 1, interior=F, col = gray(0.95), add=F, xlim = c(-80, -60), ylim = c(10, 30))
points(dat$Lon, dat$Lat, pch=19, cex=0.5, col = 1)
dev.off()
tot_num <- table(dat$Year)
tot_st <- tapply(dat$Mag, dat$Year, sum, na.rm = T)
barplot(tot_num)
barplot(tot_st)
plot(as.numeric(tot_num), as.numeric(tot_st))
datdata <- min(dat$Year):max(dat$Year)
inddata <- data.frame(as.numeric(tot_num))
labs <- c("Earthquake activity", "number of events per year", "")
indnames <- data.frame(matrix(labs, nrow = 3, byrow = F))
url1<-'https://www.bde.pr.gov/BDE/PREDDOCS/I_CRUISE.XLS'
library(readxl)
library(httr)
packageVersion("readxl")
GET(url1, write_disk(tf <- tempfile(fileext = ".xls")))
df <- read_excel(tf, 2L)
str(df)
df2 = df[c(52,63),]
df2t = as.data.frame(t(df2))
df2t = df2t[-c(1,2,12),]
yrs_PR = as.integer(df2t$V1)
cruise_PR = as.numeric(df2t$V2)
# Create a data frame
PR_cruise <- data.frame(Year = yrs_PR, Cruise_passengers = cruise_PR)
# Load necessary libraries
library(pdftools)
library(dplyr)
library(tidyr)
# Specify the URL of the PDF
url2 <- "https://usviber.org/wp-content/uploads/2023/12/Tourism-indicator-2022-12-28-23-1.pdf"
# Specify the destination file path
destfile <- "indicator_data/Cruise-indicator-2022-12-28-23-1.pdf"
# Download the PDF
download.file(url2, destfile, mode = "wb")
# Check if the file has been downloaded
file.exists(destfile)
# Load the PDF
pdf_file <- "indicator_data/Cruise-indicator-2022-12-28-23-1.pdf"
# Extract text from the PDF
pdf_text <- pdf_text(pdf_file)
# Extract the relevant page (assuming the table is on the first page)
page_text <- pdf_text[1]
# Split the text into lines
lines <- strsplit(page_text, "\n")[[1]]
# Identify the lines containing the Visitor Arrivals table
# (assuming the table starts with "VISITOR ARRIVALS" and ends before "VISITOR EXPENDITURES")
start_line <- grep("VISITOR ARRIVALS", lines)
end_line <- grep("VISITOR EXPENDITURES", lines)
table_lines <- lines[(start_line + 1):(end_line - 1)]
# Combine lines into a single text block and split by spaces
table_text <- paste(table_lines, collapse = " ")
table_data <- strsplit(table_text, " +")[[1]]
# Create years column
years <- c(2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022)
# Extract and clean the total visitors data by removing commas
passengers <- gsub(",", "", table_data[87:101])
passengers <- as.numeric(passengers)
# Create a data frame
USVI_cruise <- data.frame(Year = years, Cruise_passengers = passengers)
# Print the data frame
print(USVI_cruise)
all_years <- data.frame(Year = min(PR_cruise$Year, USVI_cruise$Year) : max(PR_cruise$Year, USVI_cruise$Year))
# Extract and clean the total visitors data by removing commas
passengers <- gsub(",", "", table_data[87:101])
all_years <- data.frame(Year = min(PR_cruise$Year, USVI_cruise$Year) : max(PR_cruise$Year, USVI_cruise$Year))
# Merge the data frames with the complete data frame to fill in missing years with NA
combined_df <- merge(all_years, PR_cruise, by = "Year", all.x = TRUE)
combined_df <- merge(combined_df, USVI_cruise, by = "Year", all.x = TRUE)
# save as indicator object ----------------------
datdata <- all_years
# save as indicator object ----------------------
datdata <- all_years$Year
inddata <- data.frame(cbind(combined_df$Cruise_passengers.x, combined_df$Cruise_passengers.y))
labs <- c("Cruise passengers" , "thousands of people", "Puerto Rico",
"Cruise passengers" , "thousands of people", "USVI")
indnames <- data.frame(matrix(labs, nrow = 3, byrow = F))
inddata <- list(labels = indnames, indicators = inddata, datelist = datdata)
class(inddata) <- "indicatordata"
ind <- inddata
plotIndicatorTimeSeries(ind, coltoplot = 1:2, plotrownum = 2, sublabel = TRUE)
save(ind, file = "indicator_objects/cruise.RData")
