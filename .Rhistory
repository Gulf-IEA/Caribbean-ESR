extract_attendees <- function(pdf_path) {
pdf_text <- pdf_text(pdf_path)
last_page <- pdf_text[length(pdf_text)]
attendees <- str_match(last_page, "Attendees in SG Meetings/Workshops\\s+(\\d+)")[2]
return(as.numeric(attendees))
}
# Function to extract the year from the filename
extract_year <- function(filename) {
year <- str_match(filename, "(\\d{4})")[1]
return(as.numeric(year))
}
# Set the directory containing the PDF files
pdf_directory <- "indicator_data/outreach/"
# Get a list of all PDF files in the directory
pdf_files <- list.files(pdf_directory, pattern = "\\.pdf$", full.names = TRUE)
# Initialize an empty data frame to store results
results <- data.frame(year = integer(), attendees = integer(), stringsAsFactors = FALSE)
# Loop through each PDF file
for (pdf_file in pdf_files) {
year <- extract_year(basename(pdf_file))
attendees <- extract_attendees(pdf_file)
results <- rbind(results, data.frame(year = year, attendees = attendees))
}
# Print the results
print(results)
results$cum_SeaGrant = cumsum(results$attendees)
# Print the results
print(results)
rm(list = ls())
dev.off()
library(pdftools)
library(stringr)
library(dplyr)
year = c(2015:2024)
participants = c(21,0,52,0,33,0,0,32,22,33)
df = data.frame(Year = year, Participants = participants)
df$cumu_MREP = cumsum(df$Participants)
rm(list = ls())
dev.off()
library(pdftools)
library(stringr)
library(dplyr)
year = c(2015:2024)
participants = c(21,0,52,0,33,0,0,32,22,33)
MREP = data.frame(Year = year, Participants = participants)
MREP$cumu_MREP = cumsum(MREP$Participants)
# Function to extract attendees from a single PDF
extract_attendees <- function(pdf_path) {
pdf_text <- pdf_text(pdf_path)
last_page <- pdf_text[length(pdf_text)]
attendees <- str_match(last_page, "Attendees in SG Meetings/Workshops\\s+(\\d+)")[2]
return(as.numeric(attendees))
}
# Function to extract the year from the filename
extract_year <- function(filename) {
year <- str_match(filename, "(\\d{4})")[1]
return(as.numeric(year))
}
# Set the directory containing the PDF files
pdf_directory <- "indicator_data/outreach/"
# Get a list of all PDF files in the directory
pdf_files <- list.files(pdf_directory, pattern = "\\.pdf$", full.names = TRUE)
# Initialize an empty data frame to store results
Seagrant <- data.frame(year = integer(), attendees = integer(), stringsAsFactors = FALSE)
# Loop through each PDF file
for (pdf_file in pdf_files) {
year <- extract_year(basename(pdf_file))
attendees <- extract_attendees(pdf_file)
Seagrant <- rbind(results, data.frame(year = year, attendees = attendees))
}
# Loop through each PDF file
for (pdf_file in pdf_files) {
year <- extract_year(basename(pdf_file))
attendees <- extract_attendees(pdf_file)
Seagrant <- rbind(Seagrant, data.frame(year = year, attendees = attendees))
}
# Print the results
print(results)
# Print the results
print(Seagrant)
Seagrant$cumu_Seagrant = cumsum(Seagrant$attendees)
# Print the results
print(Seagrant)
rm(list = ls())
dev.off()
library(pdftools)
library(stringr)
library(dplyr)
year = c(2015:2024)
participants = c(21,0,52,0,33,0,0,32,22,33)
MREP = data.frame(year = year, part_MREP = participants)
MREP$cumu_MREP = cumsum(MREP$Participants)
# Function to extract attendees from a single PDF
extract_attendees <- function(pdf_path) {
pdf_text <- pdf_text(pdf_path)
last_page <- pdf_text[length(pdf_text)]
attendees <- str_match(last_page, "Attendees in SG Meetings/Workshops\\s+(\\d+)")[2]
return(as.numeric(attendees))
}
# Function to extract the year from the filename
extract_year <- function(filename) {
year <- str_match(filename, "(\\d{4})")[1]
return(as.numeric(year))
}
# Set the directory containing the PDF files
pdf_directory <- "indicator_data/outreach/"
# Get a list of all PDF files in the directory
pdf_files <- list.files(pdf_directory, pattern = "\\.pdf$", full.names = TRUE)
# Initialize an empty data frame to store results
Seagrant <- data.frame(year = integer(), attendees = integer(), stringsAsFactors = FALSE)
# Loop through each PDF file
for (pdf_file in pdf_files) {
year <- extract_year(basename(pdf_file))
attendees <- extract_attendees(pdf_file)
Seagrant <- rbind(Seagrant, data.frame(year = year, attendees = attendees))
}
# Print the results
print(Seagrant)
Seagrant$cumu_Seagrant = cumsum(Seagrant$attendees)
df = merge(MREP, Seagrant, by = "year", all=T)
df
year = c(2015:2024)
participants = c(21,0,52,0,33,0,0,32,22,33)
MREP = data.frame(year = year, part_MREP = participants)
MREP$cumu_MREP = cumsum(MREP$Participants)
years = c(2015:2024)
participants = c(21,0,52,0,33,0,0,32,22,33)
MREP = data.frame(year = years, part_MREP = participants)
MREP$cumu_MREP = cumsum(MREP$Participants)
years = c(2015:2024)
participants = c(21,0,52,0,33,0,0,32,22,33)
MREP = data.frame(year = years, part_MREP = participants)
MREP$cumu_MREP = cumsum(MREP$participants)
rm(list = ls())
dev.off()
library(pdftools)
library(stringr)
library(dplyr)
years = c(2015:2024)
participants = c(21,0,52,0,33,0,0,32,22,33)
MREP = data.frame(year = years, part_MREP = participants)
MREP$cumu_MREP = cumsum(MREP$part_MREP)
MREP
# Function to extract attendees from a single PDF
extract_attendees <- function(pdf_path) {
pdf_text <- pdf_text(pdf_path)
last_page <- pdf_text[length(pdf_text)]
attendees <- str_match(last_page, "Attendees in SG Meetings/Workshops\\s+(\\d+)")[2]
return(as.numeric(attendees))
}
# Function to extract the year from the filename
extract_year <- function(filename) {
year <- str_match(filename, "(\\d{4})")[1]
return(as.numeric(year))
}
# Set the directory containing the PDF files
pdf_directory <- "indicator_data/outreach/"
# Get a list of all PDF files in the directory
pdf_files <- list.files(pdf_directory, pattern = "\\.pdf$", full.names = TRUE)
# Initialize an empty data frame to store results
Seagrant <- data.frame(year = integer(), attendees = integer(), stringsAsFactors = FALSE)
# Loop through each PDF file
for (pdf_file in pdf_files) {
year <- extract_year(basename(pdf_file))
attendees <- extract_attendees(pdf_file)
Seagrant <- rbind(Seagrant, data.frame(year = year, attendees = attendees))
}
# Print the results
print(Seagrant)
Seagrant$cumu_Seagrant = cumsum(Seagrant$attendees)
# Print the results
print(Seagrant)
Seagrant$cumu_Seagrant = cumsum(Seagrant$attendees)
df = merge(MREP, Seagrant, by = "year", all=T)
df
# save as indicator object ----------------------
datdata <- df$year
inddata <- data.frame(cbind(df$cumu_MREP, df$cumu_Seagrant))
labs <- c("MREP industry participants" , "cumulative number of graduates", "",
"SeaGrant workshop/meeting participants" , "cumulative number of attendees", "")
indnames <- data.frame(matrix(labs, nrow = 3, byrow = F))
inddata <- list(labels = indnames, indicators = inddata, datelist = datdata)
class(inddata) <- "indicatordata"
ind <- inddata
plotIndicatorTimeSeries(ind, coltoplot = 1:2)
df$year
datdata <- df$year
inddata <- data.frame(cbind(df$cumu_MREP, df$cumu_Seagrant))
labs <- c("MREP industry participants" , "cumulative number of graduates", "",
"SeaGrant workshop/meeting participants" , "cumulative number of attendees", "")
indnames <- data.frame(matrix(labs, nrow = 3, byrow = F))
inddata <- list(labels = indnames, indicators = inddata, datelist = datdata)
class(inddata) <- "indicatordata"
ind <- inddata
plotIndicatorTimeSeries(ind, coltoplot = 1:2, plotrownum = 2)
# save as indicator object ----------------------
datdata <- 2010:2024
inddata <- data.frame(cbind(df$cumu_MREP, df$cumu_Seagrant))
labs <- c("MREP industry participants" , "cumulative number of graduates", "",
"SeaGrant workshop/meeting participants" , "cumulative number of attendees", "")
indnames <- data.frame(matrix(labs, nrow = 3, byrow = F))
inddata <- list(labels = indnames, indicators = inddata, datelist = datdata)
class(inddata) <- "indicatordata"
ind <- inddata
plotIndicatorTimeSeries(ind, coltoplot = 1:2, plotrownum = 2)
Seagrant$cumu_Seagrant2 = Seagrant$cumu_Seagrant/1000
# Print the results
print(Seagrant)
df = merge(MREP, Seagrant, by = "year", all=T)
# save as indicator object ----------------------
datdata <- 2010:2024
inddata <- data.frame(cbind(df$cumu_MREP, df$cumu_Seagrant2))
labs <- c("MREP industry participants" , "cumulative graduates", "",
"SeaGrant workshop/meeting participants" , "cumulative attendees", "")
indnames <- data.frame(matrix(labs, nrow = 3, byrow = F))
inddata <- list(labels = indnames, indicators = inddata, datelist = datdata)
class(inddata) <- "indicatordata"
# save as indicator object ----------------------
datdata <- 2010:2024
inddata <- data.frame(cbind(df$cumu_MREP, df$cumu_Seagrant2))
labs <- c("MREP industry participants" , "cumulative graduates", "",
"SeaGrant workshop/meeting participants" , "cumulative attendees (1000s)", "")
indnames <- data.frame(matrix(labs, nrow = 3, byrow = F))
inddata <- list(labels = indnames, indicators = inddata, datelist = datdata)
class(inddata) <- "indicatordata"
ind <- inddata
plotIndicatorTimeSeries(ind, coltoplot = 1:2, plotrownum = 2)
# save as indicator object ----------------------
datdata <- 2010:2024
inddata <- data.frame(cbind(df$cumu_MREP, df$cumu_Seagrant2))
labs <- c("MREP industry participants" , "cumulative graduates", "",
"SeaGrant workshop/meeting participants" , "cumulative attendees 1000s", "")
indnames <- data.frame(matrix(labs, nrow = 3, byrow = F))
inddata <- list(labels = indnames, indicators = inddata, datelist = datdata)
class(inddata) <- "indicatordata"
ind <- inddata
plotIndicatorTimeSeries(ind, coltoplot = 1:2, plotrownum = 2)
# save as indicator object ----------------------
datdata <- 2010:2024
inddata <- data.frame(cbind(df$cumu_MREP, df$cumu_Seagrant2))
inddata
labs <- c("MREP industry participants" , "cumulative graduates", "",
"SeaGrant workshop/meeting participants" , "cumulative attendees", "")
indnames <- data.frame(matrix(labs, nrow = 3, byrow = F))
indnames
inddata <- list(labels = indnames, indicators = inddata, datelist = datdata)
class(inddata) <- "indicatordata"
ind <- inddata
plotIndicatorTimeSeries(ind, coltoplot = 1:2, plotrownum = 2)
# save as indicator object ----------------------
datdata <- 2010:2024
inddata <- data.frame(cbind(df$cumu_MREP, df$cumu_Seagrant2))
labs <- c("MREP industry participants" , "cumulative graduates", "",
"SeaGrant workshop/meeting participants" , "cumulative attendees 1000s", "")
indnames <- data.frame(matrix(labs, nrow = 3, byrow = F))
inddata <- list(labels = indnames, indicators = inddata, datelist = datdata)
class(inddata) <- "indicatordata"
ind <- inddata
plotIndicatorTimeSeries(ind, coltoplot = 1:2, plotrownum = 2)
inddata <- data.frame(cbind(df$cumu_MREP, df$cumu_Seagrant2))
labs <- c("MREP industry participants" , "cumulative graduates", "",
"SeaGrant workshop/meeting participants" , "cumulative attendees thousands", "")
indnames <- data.frame(matrix(labs, nrow = 3, byrow = F))
inddata <- list(labels = indnames, indicators = inddata, datelist = datdata)
class(inddata) <- "indicatordata"
ind <- inddata
plotIndicatorTimeSeries(ind, coltoplot = 1:2, plotrownum = 2)
labs <- c("MREP industry participants" , "cumulative graduates", "",
"SeaGrant workshop/meeting participants" , "cumulative attendees (thousands)", "")
indnames <- data.frame(matrix(labs, nrow = 3, byrow = F))
inddata <- list(labels = indnames, indicators = inddata, datelist = datdata)
class(inddata) <- "indicatordata"
ind <- inddata
plotIndicatorTimeSeries(ind, coltoplot = 1:2, plotrownum = 2)
# save as indicator object ----------------------
datdata <- 2010:2024
inddata <- data.frame(cbind(df$cumu_MREP, df$cumu_Seagrant2))
labs <- c("MREP industry participants" , "cumulative graduates", "",
"SeaGrant workshop/meeting participants" , "cumulative attendees (thousands)", "")
indnames <- data.frame(matrix(labs, nrow = 3, byrow = F))
inddata <- list(labels = indnames, indicators = inddata, datelist = datdata)
class(inddata) <- "indicatordata"
ind <- inddata
plotIndicatorTimeSeries(ind, coltoplot = 1:2, plotrownum = 2)
# save as indicator object ----------------------
datdata <- 2010:2024
inddata <- data.frame(cbind(df$cumu_MREP, df$attendees))
labs <- c("MREP industry participants" , "cumulative graduates", "",
"SeaGrant workshop/meeting participants" , "attendees", "")
indnames <- data.frame(matrix(labs, nrow = 3, byrow = F))
inddata <- list(labels = indnames, indicators = inddata, datelist = datdata)
class(inddata) <- "indicatordata"
ind <- inddata
plotIndicatorTimeSeries(ind, coltoplot = 1:2, plotrownum = 2)
# save as indicator object ----------------------
datdata <- 2010:2024
inddata <- data.frame(cbind(df$cumu_MREP, df$cumu_Seagrant2))
labs <- c("MREP industry participants" , "cumulative graduates", "",
"SeaGrant workshop/meeting participants" , "cumulative attendees (thousands)", "")
indnames <- data.frame(matrix(labs, nrow = 3, byrow = F))
inddata <- list(labels = indnames, indicators = inddata, datelist = datdata)
class(inddata) <- "indicatordata"
ind <- inddata
plotIndicatorTimeSeries(ind, coltoplot = 1:2, plotrownum = 2)
save(ind, file = "indicator_objects/outreach.RData")
load("indicator_objects/outreach.RData")
plotIndicatorTimeSeries(ind, coltoplot = 1:2, plotrownum = 2, trendAnalysis = T)
load("indicator_objects/tier3.RData")
plotIndicatorTimeSeries(ind, plotrownum = 2, coltoplot = 1:2, sublabel = TRUE, dateformat = "%Y%b", trendAnalysis = T)
rm(list = ls())
dev.off()
# Tally number of stocks from Maria's table:
PR_stocks = 34
STTSTJ_stocks = 20
STX_stocks = 20
PR_perc = (1/PR_stocks)*100
USVI_perc = (1/STX_stocks)*100
PR = c(0,0,0,0,0,0,0,0,0,0,0,0,PR_perc)
USVI = c(0,0,0,0,0,0,0,0,0,0,0,0,USVI_perc)
# save as indicator object ----------------------
datdata <- 2011:2023
inddata <- data.frame(cbind(PR, USVI))
labs <- c("Stocks/complexes with Tier 3 designation" , "Percent", "Puerto Rico",
"Stocks/complexes with Tier 3 designation" , "Percent", "USVI")
indnames <- data.frame(matrix(labs, nrow = 3, byrow = F))
ind <- list(labels = indnames, indicators = inddata, datelist = datdata)
class(inddata) <- "indicatordata"
# save as indicator object ----------------------
datdata <- 2011:2023
inddata <- data.frame(cbind(PR, USVI))
labs <- c("Stocks/complexes with Tier 3 designation" , "Percent", "Puerto Rico",
"Stocks/complexes with Tier 3 designation" , "Percent", "USVI")
indnames <- data.frame(matrix(labs, nrow = 3, byrow = F))
inddata <- list(labels = indnames, indicators = inddata, datelist = datdata)
class(inddata) <- "indicatordata"
# plot and save ----------------------------------
ind <- inddata
plotIndicatorTimeSeries(ind, plotrownum = 2, coltoplot = 1:2, sublabel = TRUE, dateformat = "%Y%b", trendAnalysis = T)
save(ind, file = "indicator_objects/tier3.RData")
load("indicator_objects/tier3.RData")
plotIndicatorTimeSeries(ind, plotrownum = 2, coltoplot = 1:2, sublabel = TRUE, dateformat = "%Y%b", trendAnalysis = T)
rm(list = ls())
dev.off()
library(jsonlite)
library(httr)
# Declares the base url for calling the API
base_url <- "https://population.un.org/dataportalapi/api/v1"
# Creates the target URL, indicators, in this instance
target <- paste0(base_url, "/indicators/")
# Get the response, which includes data as well as information on pagination and number of records
response <- fromJSON(target)
# Get the first page of data
df <- response$data
# Loop until there are new pages with data
while (!is.null(response$nextPage)){
#call the API for the next page
response <- fromJSON(response$nextPage)
#add the data of the new page to the data.frame with the data of the precious pages
df <- rbind(df, response$data)
}
View(df)
# Update relative path to retrieve records on locations
target <- paste0(base_url, "/locations/")
# Call the API
response <- fromJSON(target)
# Get the first page of data
df <- response$data
# Get the other pages with data
while (!is.null(response$nextPage)){
response <- fromJSON(response$nextPage)
df <- rbind(df, response$data)
}
View(df)
rm(list = ls())
dev.off()
library(jsonlite)
library(httr)
# Declares the base url for calling the API
base_url <- "https://population.un.org/dataportalapi/api/v1"
# Creates the target URL, indicators, in this instance
target <- paste0(base_url, "/indicators/")
# Get the response, which includes data as well as information on pagination and number of records
response <- fromJSON(target)
# Get the first page of data
df1 <- response$data
# Loop until there are new pages with data
while (!is.null(response$nextPage)){
#call the API for the next page
response <- fromJSON(response$nextPage)
#add the data of the new page to the data.frame with the data of the precious pages
df1 <- rbind(df1, response$data)
}
# Update relative path to retrieve records on locations
target <- paste0(base_url, "/locations/")
# Call the API
response <- fromJSON(target)
# Get the first page of data
df2 <- response$data
# Get the other pages with data
while (!is.null(response$nextPage)){
response <- fromJSON(response$nextPage)
df2 <- rbind(df2, response$data)
}
View(df1)
View(df2)
# Update the relative path to search for data on a specific indicator, location, and for specific years
target <- paste0(base_url, "/data/indicators/49/locations/630/start/2000/end/2024")
# Call the API
response <- fromJSON(target)
# Get the first page of data
df <- response$data
# Update the relative path to search for data on a specific indicator, location, and for specific years
target <- paste0(base_url, "/data/indicators/1/locations/4/start/2005/end/2010")
# Call the API
response <- fromJSON(target)
# Update the relative path to search for data on a specific indicator, location, and for specific years
target <- paste0(base_url, "/data/indicators/49/locations/850/start/1990/end/2024/table")
# Call the API
response <- fromJSON(target)
# Update the relative path to search for data on a specific indicator, location, and for specific years
target <- paste0(base_url, "/data/indicators/49/locations/850/start/1990/end/2024")
# Call the API
response <- fromJSON(target)
library(jsonlite)
library(httr)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(data.table)
rm(list = ls())
dev.off()
library(jsonlite)
library(httr)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(data.table)
# Declares the base url for calling the API
base_url <- "https://population.un.org/dataportalapi/api/v1"
# Creates the target URL, indicators, in this instance
target <- paste0(base_url, "/indicators/")
# Get the response, which includes data as well as information on pagination and number of records
response <- fromJSON(target)
# Get the first page of data
df1 <- response$data
# Loop until there are new pages with data
while (!is.null(response$nextPage)){
#call the API for the next page
response <- fromJSON(response$nextPage)
#add the data of the new page to the data.frame with the data of the precious pages
df1 <- rbind(df1, response$data)
}
# Update relative path to retrieve records on locations
target <- paste0(base_url, "/locations/")
# Call the API
response <- fromJSON(target)
# Get the first page of data
df2 <- response$data
# Get the other pages with data
while (!is.null(response$nextPage)){
response <- fromJSON(response$nextPage)
df2 <- rbind(df2, response$data)
}
# Creates the target URL, indicators, in this instance
target <- paste0(base_url, "/indicators/49")
# Get the response, which includes data as well as information on pagination and number of records
response <- fromJSON(target)
# Get the first page of data
df3 <- response$data
# Get the other pages with data
while (!is.null(response$nextPage)){
response <- fromJSON(response$nextPage)
df3 <- rbind(df3, response$data)
}
# Creates the target URL, indicators, in this instance
target <- paste0(base_url, "/indicators/49/locations/630")
# Get the response, which includes data as well as information on pagination and number of records
response <- fromJSON(target)
# Creates the target URL, indicators, in this instance
target <- paste0(base_url, "/locations/630")
# Get the response, which includes data as well as information on pagination and number of records
response <- fromJSON(target)
# Get the first page of data
df3 <- response$data
# Get the other pages with data
while (!is.null(response$nextPage)){
response <- fromJSON(response$nextPage)
df3 <- rbind(df3, response$data)
}
# Update the relative path to search for data on a specific indicator, location, and for specific years
target <- paste0(base_url, "/data/indicators/1/locations/4/start/2005/end/2010")
# Call the API
response <- fromJSON(target)
# Update the relative path to search for data on a specific indicator, location, and for specific years
target <- paste0(base_url, "/data/indicators/49/locations/850/start/1990/end/2024/table/pivotbylocation?df=6217b440-0427-440a-88b9-69a0a1658130")
# Call the API
response <- fromJSON(target)
# Load the required library
library(jsonlite)
# Declares the base url for calling the API
base_url <- "https://population.un.org/dataportalapi/api/v1"
# Update the relative path to search for data on a specific indicator, location, and for specific years
target <- paste0(base_url, "/data/indicators/1/locations/4/start/2005/end/2010")
# Print the target URL to ensure it's correct
print(target)
# Call the API and handle potential errors
response <- tryCatch({
fromJSON(target)
}, error = function(e) {
cat("Error: ", e$message, "\n")
NULL
})
